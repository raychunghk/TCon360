//import { create } from 'zustand';
import { createWithEqualityFn as create } from 'zustand/traditional';

const useStore = create((set) => ({
  // State variables
  activeContract: null,
  activeStaff: null,
  activeUser: null,
  authtoken: '',
  basepath: null,
  calendarEvents: [],
  chargeableDays: 0,
  clearAllState: () =>
    set(() => ({
      activeContract: null,
      activeStaff: null,
      activeUser: null,
      authtoken: '',
      basepath: null,
      calendarEvents: [],
      chargeableDays: 0,
      contractEndDate: null,
      contractEndMinDate: null,
      contractStartDate: null,
      contractStartMaxDate: null,
      editErrors: null,
      LeaveRequestPeriod: null,
      leavePurpose: null,
      leaveRequestId: null,
      navbarwidth: 230,
      publicHolidays: null,
      staff: null,
      staffVacation: { total: 0, used: 0, balance: 0 },
      selectedDatesCount: 0,
      customTitle: '',
      currentStart: new Date(),
      formType: null,
      isEventUpdated: false,
      isFrontCalendarChangeEvent: false,
      isMonthPickerChangeEvent: false,
      nextContractStartDate: null,
      selectedMonth: new Date(),
      timesheetDefaultDate: new Date(),
      user: null,
      userStatus: null,
    })),
  contractEndDate: null,
  contractEndMinDate: null,
  contractStartDate: null,
  contractStartMaxDate: null,
  editErrors: null,
  formType: null,
  isFrontCalendarChangeEvent: false,
  isMonthPickerChangeEvent: false,
  leavePurpose: null,
  leaveRequestId: null,
  LeaveRequestPeriod: null,
  navbarwidth: 260,
  nextContractStartDate: null,
  publicHolidays: null,
  selectedDatesCount: 0,
  staff: null,
  staffVacation: { total: 0, used: 0, balance: 0 },
  customTitle: '',
  currentStart: new Date(),
  timesheetDefaultDate: new Date(),
  user: null,
  userStatus: null,
  MainshellOverlayVisible: false,
  authOverlayVisible: false,
  useReverseProxy: false,
  config: null,
  setUseReverseProxy: (isUse) => set(() => ({ useReverseProxy: isUse })),
  setAuthOverlayVisible: (visible) => set(() => ({ authOverlayVisible: visible })),
  setMainshellOverlayVisible: (visible) => set(() => ({ MainshellOverlayVisible: visible })),
  // Setters
  setActiveContract: (contract) => set(() => ({ activeContract: contract })),
  setActiveStaff: (staff) => set(() => ({ activeStaff: staff })),
  setActiveUser: (user) => set(() => ({ activeUser: user })),
  setAuthtoken: (token) => set(() => ({ authtoken: token })),
  setBasepath: (path) => set(() => ({ basepath: path })),
  setCalendarEvents: (events) => set(() => ({ calendarEvents: events })),
  setChargeableDays: (days) => set(() => ({ chargeableDays: days })),
  setContractEndDate: (date) =>
    set((state) => ({
      contractEndDate: date,
      contractStartMaxDate: !state.contractStartDate
        ? new Date(new Date(date).getTime() + 24 * 60 * 60 * 1000)
        : null,
    })),
  setContractEndMinDate: (date) =>
    set(() => ({ contractEndMinDate: new Date(new Date(date).getTime() + 24 * 60 * 60 * 1000) })),
  setContractStartDate: (date) => set(() => ({ contractStartDate: date })),
  setContractStartMaxDate: (date) =>
    set(() => ({ contractStartMaxDate: new Date(new Date(date).getTime() - 24 * 60 * 60 * 1000) })),
  setEditErrors: (error) => set(() => ({ editErrors: error })),
  setFormType: (type) => set(() => ({ formType: type })),
  setLeavePurpose: (purpose) => set(() => ({ leavePurpose: purpose })),
  setLeaveRequestId: (id) => set(() => ({ leaveRequestId: id })),
  setLeaveRequestPeriod: (period) => set(() => ({ LeaveRequestPeriod: period })),
  setNextContractStartDate: (date) => set(() => ({ nextContractStartDate: date })),
  setPublicHolidays: (holidays) => set(() => ({ publicHolidays: holidays })),
  setSelectedDatesCount: (count) => set(() => ({ selectedDatesCount: count })),
  setStaff: (staff) => set(() => ({ staff: staff })),
  setStaffVacation: (vacation) => set(() => ({ staffVacation: vacation })),
  setCustomTitle: (title) => set(() => ({ customTitle: title })),
  setCurrentStart: (start) => set(() => ({ currentStart: start })),
  setTimesheetDefaultDate: (date) => set(() => ({ timesheetDefaultDate: date })),
  setUser: (user) => set(() => ({ user: user })),
  setUserStatus: (status) => set(() => ({ userStatus: status })),
  setConfig: (conf) => set(() => ({ config: conf })),
  setSelectedMonth: (date) => set(() => ({ selectedMonth: date })),
  setIsFrontCalendarChangeEvent: (event) => set(() => ({ isFrontCalendarChangeEvent: event })),
  setIsMonthPickerChangeEvent: (event) => set(() => ({ isMonthPickerChangeEvent: event })),
}));

export default useStore;
