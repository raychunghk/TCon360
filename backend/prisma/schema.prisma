// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

 

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id            String      @id @default(cuid())
  username      String?     @unique
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  staff         Staff[]
  staffId       Int?
  roleId        Int         @default(1)
  role          Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  userStatus    String      @default("active")
  viewStaff     viewStaff[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Staff {
  id            Int    @id @default(autoincrement())
  StaffName     String
  AgentName     String
  StaffCategory String
  Department    String
  PostUnit      String
  ManagerName   String
  ManagerTitle  String
  ManagerEmail  String

  userId        String
  contracts     StaffContract[] @relation("staffToContracts") // Updated field to represent multiple contracts
  leaveRequests LeaveRequest[]
  user          User            @relation(fields: [userId], references: [id])
  staffFiles    staffFiles[]
}

 

model CalendarMaster {
  CalendarDate DateTime @id
  WeekDayName  String?
  Year         Int
  Month        Int
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view viewCalendarTimeSheet {
  CalendarDate           DateTime @id
  CalendarDateStr        String?
  WeekDayName            String?
  Year                   Int?
  Month                  Int?
  VacationChargable      Decimal?
  PublicHolidayChargable Decimal?
  HolidaySummary         String?
  LeaveRequestId         Int?
  staffId                Int?
  contractId             Int
}

model PublicHoliday {
  StartDate DateTime @id
  EndDate   DateTime
  Summary   String?
}

model CalendarVacation {
  id             Int      @id @unique @default(autoincrement())
  VacationDate   DateTime
  ChargeableDay  Decimal
  LeaveRequestId Int

  leaveRequest LeaveRequest @relation(fields: [LeaveRequestId], references: [id], onDelete: Cascade)
}

model StaffContract {
  id                Int      @id @default(autoincrement())
  ContractStartDate DateTime
  ContractEndDate   DateTime
  AnnualLeave       Int

  LeaveRequest LeaveRequest[]

  staff    Staff   @relation("staffToContracts", fields: [staffId], references: [id])
  staffId  Int
  IsActive Boolean @default(false) // New field to indicate the active contract
}

model LeaveRequest {
  id               Int                @id @default(autoincrement())
  leavePeriodStart DateTime
  AMPMStart        String
  leavePeriodEnd   DateTime?
  AMPMEnd          String?
  leaveDays        Float
  dateOfReturn     DateTime
  staffSignDate    DateTime
  calendarVacation CalendarVacation[]
  staff            Staff              @relation(fields: [staffId], references: [id])
  staffFile        staffFiles         @relation(fields: [fileId], references: [id], onDelete: Cascade)
  leavePurpose     String?
  leaveType        String
  contract         StaffContract?     @relation(fields: [contractId], references: [id])
  fileId           Int
  staffId          Int
  contractId       Int                @map("contractId")
}

model staffFiles {
  id           Int            @id @default(autoincrement())
  filePath     String
  fileType     String
  staffId      Int
  LeaveRequest LeaveRequest[]
  staff        Staff          @relation(fields: [staffId], references: [id])
}

view viewEvents {
  ID               Int       @id
  leavePeriodStart DateTime
  leavePeriodEnd   DateTime?
  StartDateStr     String
  WeekDayName      String
  Year             Int
  Month            Int
  HolidaySummary   String?
  eventType        String?
  EndDateStr       String?
  dateOfReturn     DateTime?
  ReturnDateStr    String?
  AMPMStart        String?
  AMPMEnd          String?
  staffId          Int?
  LeaveRequestId   Int?
  leaveDays        Float?
  contractId       Int
}

view ViewUserRole {
  userId     String  @id
  username   String?
  name       String?
  email      String?
  roleId     Int
  roleName   String
  userStatus String
}

view ViewUserDetail {
  userId            String   @id
  username          String?
  name              String?
  email             String?
  roleId            Int
  staffId           Int?
  roleName          String
  StaffName         String
  AgentName         String
  StaffCategory     String
  Department        String
  PostUnit          String
  ManagerName       String
  ManagerTitle      String
  ManagerEmail      String
  ContractStartDate DateTime
  ContractEndDate   DateTime
  AnnualLeave       Int
  userStatus        String
  contractId        Int
}

view viewStaff {
  StaffId           Int      @id
  StaffName         String
  AgentName         String
  StaffCategory     String
  Department        String
  PostUnit          String
  ManagerName       String
  ManagerTitle      String
  ManagerEmail      String
  userId            String
  ContractStartDate DateTime
  ContractEndDate   DateTime
  AnnualLeave       Int
  contractId        Int
  user              User     @relation(fields: [userId], references: [id])
}
 